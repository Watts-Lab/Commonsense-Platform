name: Deploy to Amazon ECS

on:
  push:
    branches: ["main"]

env:
  AWS_REGION: us-east-1 # AWS region, e.g. us-west-1
  ECR_REPOSITORY: common-sense-ecr-repo # Amazon ECR repository name
  ECS_SERVICE: common-sense-service # Amazon ECS service name
  ECS_CLUSTER: common-sense-cluster # Amazon ECS cluster name
  ECS_TASK_DEFINITION: .aws/task-definition.json # Amazon ECS task definition
  CONTAINER_NAME: common-sense-ecr-repo

permissions:
  id-token: write
  contents: read

jobs:
  cypress-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Build Docker Image
        run: docker build -t my-app .

      - name: Start Backend and Frontend
        run: docker run -d -p 80:80 my-app

      - name: Run Cypress Tests
        working-directory: client
        run: npx cypress run --record --key ${{ secrets.CYPRESS_RECORD_KEY }} --headed --config-file cypress.config.ts

      - name: Archive Test Artifacts on Failure
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: cypress-artifacts
          path: |
            cypress/screenshots
            cypress/videos

  deploy:
    name: Deploy
    needs: cypress-tests
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_PROD_ID }}
          aws-secret-access-key: ${{ secrets.AWS_PROD_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --build-arg GITHUB_HASH=${GITHUB_SHA::7} --build-arg GITHUB_BRANCH=${GITHUB_REF_NAME} .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
